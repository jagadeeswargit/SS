https://arry.medium.com/how-to-add-react-native-web-to-an-existing-react-native-project-eb98c952c12f


npx react-native init MyFirstRNWeb

npx yarn add react-native-web

npx yarn add -D babel-plugin-react-native-web webpack webpack-cli webpack-dev-server html-webpack-plugin react-dom babel-loader url-loader @svgr/webpack

npx yarn run web


Package.json

"build": "rm -rf dist/ && webpack --mode=production --config webpack.config.js",
    "web": "webpack serve --mode=development --config webpack.config.js"

index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>RN Web</title>
    <style>
      #app-root {
        display: flex;
        flex: 1 1 100%;
        height: 100vh;
      }
    </style>
  </head>
  <body>
    <div id="app-root"></div>
  </body>
</html>

index.web.js

import {AppRegistry} from 'react-native';
import {name as appName} from './app.json';
import App from './App';
if (module.hot) {
  module.hot.accept();
}
AppRegistry.registerComponent(appName, () => App);
AppRegistry.runApplication(appName, {
  initialProps: {},
  rootTag: document.getElementById('app-root'),
});

webpack.config

const path = require('path');

const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const appDirectory = path.resolve(__dirname);
const {presets} = require(`${appDirectory}/babel.config.js`);

const compileNodeModules = [
  // Add every react-native package that needs compiling
  // 'react-native-gesture-handler',
].map(moduleName => path.resolve(appDirectory, `node_modules/${moduleName}`));

const babelLoaderConfiguration = {
  test: /\.js$|tsx?$/,
  // Add every directory that needs to be compiled by Babel during the build.
  include: [
    path.resolve(__dirname, 'index.web.js'), // Entry to your application
    path.resolve(__dirname, 'App.tsx'), // Change this to your main App file
    path.resolve(__dirname, 'src'),
    ...compileNodeModules,
  ],
  use: {
    loader: 'babel-loader',
    options: {
      cacheDirectory: true,
      presets,
      plugins: ['react-native-web'],
    },
  },
};

const svgLoaderConfiguration = {
  test: /\.svg$/,
  use: [
    {
      loader: '@svgr/webpack',
    },
  ],
};

const imageLoaderConfiguration = {
  test: /\.(gif|jpe?g|png)$/,
  use: {
    loader: 'url-loader',
    options: {
      name: '[name].[ext]',
    },
  },
};

module.exports = {
  entry: {
    app: path.join(__dirname, 'index.web.js'),
  },
  output: {
    path: path.resolve(appDirectory, 'dist'),
    publicPath: '/',
    filename: 'rnw_blogpost.bundle.js',
  },
  resolve: {
    extensions: ['.web.tsx', '.web.ts', '.tsx', '.ts', '.web.js', '.js'],
    alias: {
      'react-native$': 'react-native-web',
    },
  },
  module: {
    rules: [
      babelLoaderConfiguration,
      imageLoaderConfiguration,
      svgLoaderConfiguration,
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, 'index.html'),
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.DefinePlugin({
      _DEV_: JSON.stringify(true),
    }),
  ],
};



app.tsk

import React from 'react';
import {
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from 'react-native';

const App = () => {
  return (
    <View style={styles.container}>
      <Text style={styles.appName}>App Name</Text>

      <View style={styles.viewContainer}>
        <TouchableOpacity style={styles.button}>
          <Text style={styles.buttonView}>Browse file</Text>
        </TouchableOpacity>
        <Text style={styles.qa}>Q&A</Text>
        <TextInput style={styles.inputStyle} placeholder="Enter a question" />
        <TouchableOpacity style={styles.buttonSubmit}>
          <Text style={styles.buttonSubmitView}>Submit</Text>
        </TouchableOpacity>
        <TextInput style={styles.inputAnsStyle} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    height: '100%',
    backgroundColor: '#ffffff',
    alignItems: 'center',
  },

  button: {
    marginTop: 20,
    height: 40,
    width: '90%',
    backgroundColor: '#C01700',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
  },
  buttonSubmit: {
    width: 150,
    height: 38,
    backgroundColor: '#C01700',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
    marginTop: 20,
  },
  buttonSubmit2: {
    width: 270,
    height: 40,
    backgroundColor: '#C01700',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 8,
  },
  inputStyle: {
    width: '90%',
    height: 46,
    borderColor: 'gray',
    borderWidth: 2,
    borderRadius: 4,
    marginTop: 20,
    paddingHorizontal: 5,
    fontSize: 18,
    color: '#004368',
  },
  inputAnsStyle: {
    width: '90%',
    height: 150,
    borderColor: 'gray',
    borderWidth: 2,
    borderRadius: 4,
    marginTop: 20,
    paddingHorizontal: 5,
    fontSize: 18,
    color: '#004368',
  },
  viewContainer: {
    width: 400,
    height: 440,
    borderRadius: 4,
    borderWidth: 1,
    elevation: 10,
    marginVertical: 40,
    borderColor: 'black ',
    alignItems: 'center',
    justifyContent: 'center',
  },
  appName: {
    marginTop: 120,
    color: '#C01700',
    fontWeight: '900',
    fontSize: 24,
    borderColor: '#C01700',
    borderRadius: 4,
    borderWidth: 0.5,
    padding: 10,
  },
  qa: {
    color: '#C01700',
    fontWeight: '700',
    fontSize: 18,
    textAlign: 'left',
    marginTop: 10,
  },
  buttonView: {
    color: 'white',
    fontWeight: '500',
    paddingHorizontal: 20,
  },
  buttonSubmitView: {
    color: 'white',
    fontWeight: '500',
    paddingHorizontal: 20,
  },
});

export default App;
